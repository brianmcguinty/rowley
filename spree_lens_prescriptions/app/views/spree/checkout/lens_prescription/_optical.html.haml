= f.fields_for :lens_prescription do |pf|
  .checkout-section
    .param-name #{t('lens_prescription.enter_new_prescription.title')}
    .row
      = label_tag "prescription_vision_type_#{sunglasses ? 'sunglasses' : 'optical'}", t('lens_prescription.vision_type.title')
      = pf.select :vision_type, Spree::LensPrescription::VISION_TYPE.map {|t| [t("lens_prescription.vision_type.#{t}"), t]}, {}, |
        :id => "prescription_vision_type_#{sunglasses ? 'sunglasses' : 'optical'}", :class => 'order_lens_prescription_attributes_vision_type refresh_totals', 'data-hook'=>'select-vision-type',            |
        'data-placement'=>"right", 'data-trigger'=>"manual", 'data-toggle'=>"popover",                                           |
        'data-content'=>t('what_is_this.cryzal', :url=>link_to('Cryzal', 'http://www.crizalusa.com/'))                           |
      =image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.vision').html_safe
    .row
      = label_tag "prescription_two_pds_#{sunglasses ? 'sunglasses' : 'optical'}", t('lens_prescription.two_pds')
      = pf.check_box :two_pds, :class => "order_lens_prescription_attributes_two_pds", :id => "prescription_two_pds_#{sunglasses ? 'sunglasses' : 'optical'}"
      = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.two_pds').html_safe
  .checkout-section
    %table
      %tr
        %th
          = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.od_os')
        %th
          SPH
          = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.sph')
        %th
          CYL
          = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.cyl')
        %th
          AXIS
          = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.axis')
        %th.optical_add_container{ :style => "#{unless pf.object.progressive? then 'display:none' end}" }
          ADD
          = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.add')
        %th.two_pds{:style => unless pf.object.two_pds? then 'display:none' end} PD
      %tr
        %td OD (right):
        %td= pf.select :right_sph, Spree::LensPrescription::SPH, {}, :class => 'forced_thin_arg refresh_totals', :id => 'optical_right_sph'
        %td= pf.select :right_cyl, Spree::LensPrescription::CYL, {}, :class => 'forced_thin_arg refresh_totals', :id => 'optical_right_cyl'
        %td= pf.select :right_axis, Spree::LensPrescription::AXIS.map {|p| ['%03d' % p, p]}
        %td.optical_add_container{ :style => "#{unless pf.object.progressive? then 'display:none' end}" }= pf.select :right_add, Spree::LensPrescription::ADD
        %td.two_pds{:style => unless pf.object.two_pds? then 'display:none' end}= pf.select :right_pd, Spree::LensPrescription::MONO_PD
      %tr
        %td OS (left):
        %td= pf.select :left_sph, Spree::LensPrescription::SPH, {}, :class => 'forced_thin_arg refresh_totals', :id => 'optical_left_sph'
        %td= pf.select :left_cyl, Spree::LensPrescription::CYL, {}, :class => 'forced_thin_arg refresh_totals', :id => 'optical_left_cyl'
        %td= pf.select :left_axis, Spree::LensPrescription::AXIS.map {|p| ['%03d' % p, p]}
        %td.optical_add_container{ :style => "#{unless pf.object.progressive? then 'display:none' end}" }= pf.select :left_add, Spree::LensPrescription::ADD
        %td.two_pds{:style => unless pf.object.two_pds? then 'display:none' end}= pf.select :left_pd, Spree::LensPrescription::MONO_PD
  .row.row-prescription.one_pd{:style => if pf.object.two_pds? then 'display:none' end}
    = label_tag "prescription_pd_#{sunglasses ? 'sunglasses' : 'optical'}", 'PD'
    %td= pf.select :pd, Spree::LensPrescription::PD, {}, :id => "prescription_pd_#{sunglasses ? 'sunglasses' : 'optical'}"
    = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.two_pds').html_safe
  .row.row-prescription
    = label_tag "prescription_lens_type_#{sunglasses ? 'sunglasses' : 'optical'}", t('lens_prescription.lens_type.title')
    -# = pf.select :lens_type, Spree::LensPrescription::LENS_TYPE.map {|t| [t("lens_prescription.lens_type.#{t}"), t]}, {}, :id => 'optical_lens_type'
    = pf.select :lens_type, options_for_select(Spree::LensPrescription::LENS_TYPE.map {|lt| [t("lens_prescription.lens_type.#{lt}"), lt]}, :selected => pf.object.lens_type, :disabled => [if pf.object.forced_thin? then 'standard' end].compact), { :prompt => '----' }, :class => 'order_lens_meta_prescription_attributes_lens_prescription_attributes_state_id refresh_totals optical_lens_type', :id => "prescription_lens_type_#{sunglasses ? 'sunglasses' : 'optical'}"
    = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.hi_index').html_safe
  -# .checkout-section#wear{:style => unless pf.object.vision_type.to_sym == :progressive then 'display:none' end}
  -#   .param-name= t('lens_prescription.wear.title')
  -#   - Spree::LensPrescription::WEAR.each do |wear|
  -#     .row
  -#       = pf.radio_button :wear, wear
  -#       = pf.label :wear, t("lens_prescription.wear.#{wear}"), :value => wear
  - if sunglasses
    .checkout-section
      .param-name #{t('lens_prescription.sunglasses_with.title')}
      .row
        = pf.radio_button :standard_or_custom_tint_or_polarized, :standard, :class => 'refresh_totals'
        = pf.label :standard_or_custom_tint_or_polarized, t("lens_prescription.frames_sunglasses.sunglasses.standard"), :value => :standard
      .row
        = pf.radio_button :standard_or_custom_tint_or_polarized, :custom_tint, :class => 'refresh_totals'
        = pf.label :standard_or_custom_tint_or_polarized, t("lens_prescription.frames_sunglasses.sunglasses.custom_tint"), :value => :custom_tint
        = pf.select :custom_tint, Spree::LensPrescription::TINT.map {|t| [t("lens_prescription.tint.#{t}"), t]}
        = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.custom_tint')
      .row
        = pf.radio_button :standard_or_custom_tint_or_polarized, :polarized, :class => 'refresh_totals'
        = pf.label :standard_or_custom_tint_or_polarized, t("lens_prescription.frames_sunglasses.sunglasses.polarized_lens"), :value => :polarized
        = pf.select :polarized_color, Spree::LensPrescription::POLARIZED.map {|t| [t("lens_prescription.polarized.#{t}"), t]}
        = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.polarized').html_safe
    -# .row
    -#   = pf.label :custom_tint, t('lens_prescription.tint')
    -#   = pf.select :custom_tint, Spree::LensPrescription::TINT
  - else
    .row.row-prescription
      = pf.label :transition, t('lens_prescription.transition_question')
      = pf.select :transition, [[t(:no), false], [t(:yes), true]], {}, :class => 'refresh_totals'
      = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.transitions_lenses').html_safe
  - if signed_in?
    .row.row-prescription
      = label_tag "prescription_name_#{sunglasses ? 'sunglasses' : 'optical'}", t('lens_prescription.name_this_prescription')
      = pf.text_field :name, :id => "prescription_name_#{sunglasses ? 'sunglasses' : 'optical'}"
    .row.notice= t('what_is_this.name_prescription')

  - if signed_in? && current_user.active_subscription.blank?
    .row
      = render 'spree/checkout/lens_prescription/purchase_subscription', :f => f, :place => if sunglasses then :optical_sunglasses else :optical_optical end
  .row.row-prescription
    = label_tag "prescription_state_id_#{sunglasses ? 'sunglasses' : 'optical'}", t('lens_prescription.verification.state')
    = pf.select :state_id, options_for_select(Spree::State.order(:abbr).map { |s| [s.abbr, s.id, if s.doctor_verification? then { 'data-doctor-verification' => '1' } else {} end] }, pf.object.state_id), { :prompt => '----' }, :class => 'order_lens_meta_prescription_attributes_lens_prescription_attributes_state_id', :id => "prescription_state_id_#{sunglasses ? 'sunglasses' : 'optical'}" 
    = image_tag '/assets/store/whats-this.png', :class=>'action-link', 'data-placement'=>"top", 'data-trigger'=>"hover", 'data-toggle'=>"popover", 'data-content'=>t('what_is_this.states').html_safe
    
  .checkout-section#verification{:style => unless pf.object.state.present? && pf.object.state.doctor_verification? then 'display:none' end}
    .param-name #{t('lens_prescription.verification.title')}
    .row
      - Spree::LensPrescription::VERIFICATION_METHOD.each do |vm|
        .row
          = pf.radio_button :verification_method, vm, :class => 'verification_method_selector', :id =>  "prescription_state_id_#{sunglasses ? 'sunglasses' : 'optical'}_#{vm}"
          = label_tag "prescription_state_id_#{sunglasses ? 'sunglasses' : 'optical'}_#{vm}", t("lens_prescription.verification.#{vm}")
        .row{:style => unless pf.object.verification_method.to_s == vm.to_s then 'display:none' end, :id => "verification_#{vm}", :class => 'verification_method_container'}
          = render "spree/checkout/lens_prescription/verification_#{vm}", :f => pf, :mf => f, :sunglasses => sunglasses
  .checkout-section
    .form-buttons{'data-hook' => 'buttons'}
      = submit_tag t(:continue), :class => 'continue button primary'
